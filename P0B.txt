public class Project0B_1 {
        
		public static Integer nFibonacci( Integer n ){
   			List<Integer> nfib = new List<Integer> {1,1};
//            Integer i;
            Integer sum;
            
            if (n <= 0){
                return 0;
            } else if (n == 1 || n == 2) {
				return 1;                
            } 
            
            for(Integer i = 0; i < n-2; i++){
            	sum = nfib.get(nfib.size()-1) + nfib.get(nfib.size()-2);
                // sum = nfib.get((nfib.size()-1) + (nfib.get(nfib.size()-2)));
                nfib.add(sum);
            }
  			 System.debug(sum);
    
    		return sum;
  
        }

    	public static Integer[] sortArray( Integer[] intList ) {
    	//n is size of IntList.
        Integer n = intList.Size();
         //loop until size of List
            for(Integer i = 0; i < n; i++){
                for (Integer j = 1; j < n; j++){
                    //If 1st integer is bigger than 2nd integer use if method;
                    if(intList[j - 1] >= intList[j]) {
                        // Change 1st and 2nd integer values
                        Integer temp;
                        temp = intList[j-1];
                        intList[j-1] = intList[j];
                        intList[j] = temp;

                    }
                }
                
            }
            System.debug(intList);
        	return intList;
        }
    
    
        public static Integer nFactorial(Integer n) {
   
        Integer sum = 1;
        for(Integer i = 1; i <= n; i++){
            // Factorial values.
           sum = sum * i;
        }
        
        system.debug(sum);
    	return sum;
            
    	} 
    
    
    	public static Integer[] rotateLeftNTimes( Integer[] YingHao, Integer n) {
        
        for(Integer i = 0; i < n; i++) {
            //Add 1st list value to the end of value
            YingHao.add(YingHao.get(0));
            YingHao.remove(0); // remove 1st value;
        }
        System.debug(YingHao);
        return YingHao;
	}

    	public static Boolean bracketsAreBalanced( String s ) {
          
            Map<String,String> bracket = new Map<string,String>{'(' => ')' , '{' => '}' , '[' => ']'}; //Key Listed Map need to match value on Map
            List<String> bracket_Checking = new List<String>();  // new String List
                for (Integer i = 0; i < s.Length()-1; i++){ //Loop until s Length
				if(bracket.containsKey(s.substring(i,i+1))){  
                    if((bracket.get(s.substring(i, i+1))) == bracket_Checking[bracket_Checking.Size()-1] ){ // if map key match remove
							bracket_Checking.remove(bracket_Checking.size()-1);  
						}
                    }
                    else if (bracket.containsKey(s.substring(i,i+1)) == false){ //1st here and add them
					bracket_Checking.add(s.substring(i,i+1)); 
					}
                }
             
            return bracket_Checking.Size()== 0;
         
        }
    
    /*
 * 6. Create a method that retrieves a list of all accounts and updates those accounts.
 * Create a custom field on the Account standard object called Size__c that will be a
 * picklist containing small/medium/large.
 * Create a method that retrieves a list of all accounts.
 * - If an account has between 1-1000 employees then it is classified as small.
 * - If an account has between 1001-10000 employees it is classified as medium.
 * - If an account has more than 10000 employees it is classified as large.
 * Update the Size__c field on each account to reflect the amount of employees in the Account.
 */

    
    public static void updateAccountSize( ) {
 		
    	List<Account> acc = [SELECT Name,NumberOfEmployees,Size__c FROM Account];
        
        for(Integer i = 0; i < acc.Size(); i++){
        if (acc[i].NumberOfEmployees > 0 && acc[i].NumberOfEmployees <= 1000) {
            acc[i].Size__c = 'Small';
        } else if (acc[i].NumberOfEmployees >= 1001 && acc[i].NumberOfEmployees <= 10000) {
             acc[i].Size__c = 'Medium';
        } else if (acc[i].NumberOfEmployees < 10001) {
			 acc[i].Size__c = 'Large';      	
        }
            update acc;
        }
    }
/* 
 * 7. Create a method that will find all leads that contain 'ca' in their fields.
 * If a lead is located in California(CA), change their Lead Status field to 'Closed - Not
 * Converted' and their description should display the message, "We are no longer doing
 * business in California."
 */
 	public static void updateCALeads( ) {
        List<Lead> acc = [SELECT Name,Address,Status,Description FROM LEAD WHERE STATE = 'ca'];
        for(Integer i = 0; i < acc.Size(); i++){
            //if(acc[i].Address.state = 'ca'){
            acc[i].status = 'Closed - Not Converted';
            acc[i].Description = 'We are no longer doing business in California';    
           // }
        }
            update acc;
        }
    /*
 	* 8. Create a method that will find all Opportunities which have already passed their Close Date
 	* and have a Stage field that is not 'Closed Won'. Since they have passed their Close Date and
 	* they are not marked as 'Closed Won', they should be marked as 'Closed Lost'.
 	*/
 	public static void closePastDueOpportunities( ) {
        List<Opportunity> acc = [SELECT Name,StageName,CloseDate FROM Opportunity WHERE StageName != 'Close Won' AND CloseDate < Today];
	  	for(Integer i = 0; i < acc.Size(); i++){
     	   acc[i].StageName = 'Closed Lost';
        }
 	}
    
 	}